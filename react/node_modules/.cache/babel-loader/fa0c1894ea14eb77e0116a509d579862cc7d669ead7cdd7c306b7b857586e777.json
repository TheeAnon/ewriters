{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, LOGOUT } from \"./types\";\nimport axios from \"axios\";\nimport res from \"react\";\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem(\"access\")\n    });\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n      if (res.data.code !== \"token_not_valid\") {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const load_user = (email, password) => async dispatch => {\n  if (localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorisation: `JWT ${localStorage.getItem(\"access\")}`,\n        Accept: \"application/json\"\n      }\n    };\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n    } catch (err) {}\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {}\n  dispatch({\n    type: LOGIN_FAIL,\n    payload: res.data\n  });\n};\nexport const logout = () => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","LOGOUT","axios","res","checkAuthenticated","dispatch","localStorage","getItem","config","headers","Accept","body","JSON","stringify","token","post","process","env","REACT_APP_API_URL","data","code","type","error","load_user","email","password","Authorisation","get","payload","err","login","logout"],"sources":["D:/Japhe/Code/django-react/ewriters/react/src/actions/auth.js"],"sourcesContent":["import {\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  USER_LOADED_SUCCESS,\r\n  USER_LOADED_FAIL,\r\n  AUTHENTICATED_SUCCESS,\r\n  AUTHENTICATED_FAIL,\r\n  LOGOUT,\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\nimport res from \"react\";\r\n\r\nexport const checkAuthenticated = () => async (dispatch) => {\r\n  if (localStorage.getItem(\"access\")) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    };\r\n    const body = JSON.stringify({ token: localStorage.getItem(\"access\") });\r\n    try {\r\n      const res = await axios.post(\r\n        `${process.env.REACT_APP_API_URL}/auth/jwt/verify/`,\r\n        body,\r\n        config\r\n      );\r\n      if (res.data.code !== \"token_not_valid\") {\r\n        dispatch({\r\n          type: AUTHENTICATED_SUCCESS,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: AUTHENTICATED_FAIL,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      dispatch({\r\n        type: AUTHENTICATED_FAIL,\r\n      });\r\n    }\r\n  } else {\r\n    dispatch({ type: AUTHENTICATED_FAIL });\r\n  }\r\n};\r\n\r\nexport const load_user = (email, password) => async (dispatch) => {\r\n  if (localStorage.getItem(\"access\")) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorisation: `JWT ${localStorage.getItem(\"access\")}`,\r\n        Accept: \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        `${process.env.REACT_APP_API_URL}/auth/users/me/`,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: USER_LOADED_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      dispatch(load_user());\r\n    } catch (err) {}\r\n    dispatch({\r\n      type: USER_LOADED_FAIL,\r\n    });\r\n  } else {\r\n    dispatch({\r\n      type: USER_LOADED_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  try {\r\n    const res = await axios.post(\r\n      `${process.env.REACT_APP_API_URL}/auth/jwt/create/`,\r\n      body,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {}\r\n  dispatch({\r\n    type: LOGIN_FAIL,\r\n    payload: res.data,\r\n  });\r\n};\r\n\r\nexport const logout = () => {\r\n  dispatch({ type: LOGOUT });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}