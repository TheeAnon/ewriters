{"ast":null,"code":"/*!\n * csrf\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nvar rndm = require('rndm');\nvar uid = require('uid-safe');\nvar compare = require('tsscmp');\nvar crypto = require('crypto');\n\n/**\n * Module variables.\n * @private\n */\n\nvar EQUAL_GLOBAL_REGEXP = /=/g;\nvar PLUS_GLOBAL_REGEXP = /\\+/g;\nvar SLASH_GLOBAL_REGEXP = /\\//g;\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = Tokens;\n\n/**\n * Token generation/verification class.\n *\n * @param {object} [options]\n * @param {number} [options.saltLength=8] The string length of the salt\n * @param {number} [options.secretLength=18] The byte length of the secret key\n * @public\n */\n\nfunction Tokens(options) {\n  if (!(this instanceof Tokens)) {\n    return new Tokens(options);\n  }\n  var opts = options || {};\n  var saltLength = opts.saltLength !== undefined ? opts.saltLength : 8;\n  if (typeof saltLength !== 'number' || !isFinite(saltLength) || saltLength < 1) {\n    throw new TypeError('option saltLength must be finite number > 1');\n  }\n  var secretLength = opts.secretLength !== undefined ? opts.secretLength : 18;\n  if (typeof secretLength !== 'number' || !isFinite(secretLength) || secretLength < 1) {\n    throw new TypeError('option secretLength must be finite number > 1');\n  }\n  this.saltLength = saltLength;\n  this.secretLength = secretLength;\n}\n\n/**\n * Create a new CSRF token.\n *\n * @param {string} secret The secret for the token.\n * @public\n */\n\nTokens.prototype.create = function create(secret) {\n  if (!secret || typeof secret !== 'string') {\n    throw new TypeError('argument secret is required');\n  }\n  return this._tokenize(secret, rndm(this.saltLength));\n};\n\n/**\n * Create a new secret key.\n *\n * @param {function} [callback]\n * @public\n */\n\nTokens.prototype.secret = function secret(callback) {\n  return uid(this.secretLength, callback);\n};\n\n/**\n * Create a new secret key synchronously.\n * @public\n */\n\nTokens.prototype.secretSync = function secretSync() {\n  return uid.sync(this.secretLength);\n};\n\n/**\n * Tokenize a secret and salt.\n * @private\n */\n\nTokens.prototype._tokenize = function tokenize(secret, salt) {\n  return salt + '-' + hash(salt + '-' + secret);\n};\n\n/**\n * Verify if a given token is valid for a given secret.\n *\n * @param {string} secret\n * @param {string} token\n * @public\n */\n\nTokens.prototype.verify = function verify(secret, token) {\n  if (!secret || typeof secret !== 'string') {\n    return false;\n  }\n  if (!token || typeof token !== 'string') {\n    return false;\n  }\n  var index = token.indexOf('-');\n  if (index === -1) {\n    return false;\n  }\n  var salt = token.substr(0, index);\n  var expected = this._tokenize(secret, salt);\n  return compare(token, expected);\n};\n\n/**\n * Hash a string with SHA1, returning url-safe base64\n * @param {string} str\n * @private\n */\n\nfunction hash(str) {\n  return crypto.createHash('sha1').update(str, 'ascii').digest('base64').replace(PLUS_GLOBAL_REGEXP, '-').replace(SLASH_GLOBAL_REGEXP, '_').replace(EQUAL_GLOBAL_REGEXP, '');\n}","map":{"version":3,"names":["rndm","require","uid","compare","crypto","EQUAL_GLOBAL_REGEXP","PLUS_GLOBAL_REGEXP","SLASH_GLOBAL_REGEXP","module","exports","Tokens","options","opts","saltLength","undefined","isFinite","TypeError","secretLength","prototype","create","secret","_tokenize","callback","secretSync","sync","tokenize","salt","hash","verify","token","index","indexOf","substr","expected","str","createHash","update","digest","replace"],"sources":["D:/Japhe/Code/ewriters-mega/e/ewriters/node_modules/csrf/index.js"],"sourcesContent":["/*!\n * csrf\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar rndm = require('rndm')\nvar uid = require('uid-safe')\nvar compare = require('tsscmp')\nvar crypto = require('crypto')\n\n/**\n * Module variables.\n * @private\n */\n\nvar EQUAL_GLOBAL_REGEXP = /=/g\nvar PLUS_GLOBAL_REGEXP = /\\+/g\nvar SLASH_GLOBAL_REGEXP = /\\//g\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = Tokens\n\n/**\n * Token generation/verification class.\n *\n * @param {object} [options]\n * @param {number} [options.saltLength=8] The string length of the salt\n * @param {number} [options.secretLength=18] The byte length of the secret key\n * @public\n */\n\nfunction Tokens (options) {\n  if (!(this instanceof Tokens)) {\n    return new Tokens(options)\n  }\n\n  var opts = options || {}\n\n  var saltLength = opts.saltLength !== undefined\n    ? opts.saltLength\n    : 8\n\n  if (typeof saltLength !== 'number' || !isFinite(saltLength) || saltLength < 1) {\n    throw new TypeError('option saltLength must be finite number > 1')\n  }\n\n  var secretLength = opts.secretLength !== undefined\n    ? opts.secretLength\n    : 18\n\n  if (typeof secretLength !== 'number' || !isFinite(secretLength) || secretLength < 1) {\n    throw new TypeError('option secretLength must be finite number > 1')\n  }\n\n  this.saltLength = saltLength\n  this.secretLength = secretLength\n}\n\n/**\n * Create a new CSRF token.\n *\n * @param {string} secret The secret for the token.\n * @public\n */\n\nTokens.prototype.create = function create (secret) {\n  if (!secret || typeof secret !== 'string') {\n    throw new TypeError('argument secret is required')\n  }\n\n  return this._tokenize(secret, rndm(this.saltLength))\n}\n\n/**\n * Create a new secret key.\n *\n * @param {function} [callback]\n * @public\n */\n\nTokens.prototype.secret = function secret (callback) {\n  return uid(this.secretLength, callback)\n}\n\n/**\n * Create a new secret key synchronously.\n * @public\n */\n\nTokens.prototype.secretSync = function secretSync () {\n  return uid.sync(this.secretLength)\n}\n\n/**\n * Tokenize a secret and salt.\n * @private\n */\n\nTokens.prototype._tokenize = function tokenize (secret, salt) {\n  return salt + '-' + hash(salt + '-' + secret)\n}\n\n/**\n * Verify if a given token is valid for a given secret.\n *\n * @param {string} secret\n * @param {string} token\n * @public\n */\n\nTokens.prototype.verify = function verify (secret, token) {\n  if (!secret || typeof secret !== 'string') {\n    return false\n  }\n\n  if (!token || typeof token !== 'string') {\n    return false\n  }\n\n  var index = token.indexOf('-')\n\n  if (index === -1) {\n    return false\n  }\n\n  var salt = token.substr(0, index)\n  var expected = this._tokenize(secret, salt)\n\n  return compare(token, expected)\n}\n\n/**\n * Hash a string with SHA1, returning url-safe base64\n * @param {string} str\n * @private\n */\n\nfunction hash (str) {\n  return crypto\n    .createHash('sha1')\n    .update(str, 'ascii')\n    .digest('base64')\n    .replace(PLUS_GLOBAL_REGEXP, '-')\n    .replace(SLASH_GLOBAL_REGEXP, '_')\n    .replace(EQUAL_GLOBAL_REGEXP, '')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}